// MAX 1D RANGE

// inside int main()
int n = 9, A[] = { 4, -5, 4, -3, 4, 4, -4, 4, -5 }; // a sample array A
int sum = 0, ans = 0; // important, ans must be initialized to 0
for (int i = 0; i < n; i++) { // linear scan, O(n)
	sum += A[i]; // we greedily extend this running sum
	ans = max(ans, sum); // we keep the maximum RSQ overall
	if (sum < 0) sum = 0; // but we reset the running sum
} // if it ever dips below 0
printf("Max 1D Range Sum = %d\n", ans);

// MAX 2d RANGE

scanf("%d", &n); // the dimension of input square matrix
for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) {
	scanf("%d", &A[i][j]);
	if (i > 0) A[i][j] += A[i - 1][j]; // if possible, add from top
	if (j > 0) A[i][j] += A[i][j - 1]; // if possible, add from left
	if (i > 0 && j > 0) A[i][j] -= A[i - 1][j - 1]; // avoid double count
} 

maxSubRect = -127*100*100; // the lowest possible value for this problem
for (int i = 0; i < n; i++) 
	for (int j = 0; j < n; j++) // start coordinate
		for (int k = i; k < n; k++) 
			for (int l = j; l < n; l++) { // end coord
				subRect = A[k][l]; // sum of all items from (0, 0) to (k, l): O(1)
				if (i > 0) subRect -= A[i - 1][l]; // O(1)
				if (j > 0) subRect -= A[k][j - 1]; // O(1)
				if (i > 0 && j > 0) subRect += A[i - 1][j - 1]; // O(1)
				maxSubRect = max(maxSubRect, subRect); 
			} 
